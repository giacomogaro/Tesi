library(recommenderlab) #per i suggerimenti
library(ggplot2) #per la visualizzazione
library(data.table) #per creare base di dati
library(reshape2)

movie_data <- read.csv("./movies.csv", stringsAsFactors = FALSE)

rating_data <- read.csv("./ratings.csv")

#il costrutto str ha bisogno di un file csv

str(movie_data)
str(rating_data)

data.table(movie_data)
data.table(rating_data)

summary(movie_data)
summary(rating_data)

#dobbiamo fare qualcosa per i generi più usati
#creiamo variabile nuovi genere solo della variabile genere del dataset movies
#creiamo un dataset andando a associare le posizioni delle colonne con i movies

movie_genre <- as.data.frame(movie_data$genres, stringsAsFactors = FALSE)

movie_genre2 <- as.data.frame(tstrsplit(movie_genre[,1], "[|]", type.convert = TRUE), stringsAsFactors = FALSE)

colnames(movie_genre2) <- c(1:10)

list_genre <- c("Action", "Adventure", "Animation", "Children", 
                "Comedy", "Crime","Documentary", "Drama", "Fantasy",
                "Film-Noir", "Horror", "Musical", "Mystery","Romance",
                "Sci-Fi", "Thriller", "War", "Western")

genre_matl <- matrix(0,10330,18)
genre_matl [1,] <- list_genre
colnames(genre_matl) <- list_genre

 for (index in 1:nrow(movie_genre2)) {
   for (col in 1:ncol(movie_genre2)) {
     gen_col = which(genre_matl[1,] == movie_genre2[index,col])
     genre_matl[index+1, gen_col] <- 1
   }   
 }

genre_mat2 <- as.data.frame(genre_matl[-1,], stringsAsFactors = FALSE)

for(col in 1: ncol(genre_mat2)) {
   genre_mat2[,col] <- as.integer(genre_mat2[,col])
} 
str(genre_mat2)

#dobbiamo creare una matrice di ricerca che ci da i film basati sui generi 

SearchMovie <- cbind(movie_data[,1:2], genre_mat2[])

head(SearchMovie)

ratingMatrix <- dcast(rating_data, userId~movieId, value.var = "rating", na.rm = FALSE)
ratingMatrix <- as.matrix(ratingMatrix[,-1]) #non ha bisogno dell'Id dell'utente, ridefiniamo ratingMatrix
ratingMatrix <- as(ratingMatrix, "realRatingMatrix") 
#va a convertire la matrice reale in una matrice sparsa di raccomandazione
#modello di raccomandazione

recomendation_model <- recommenderRegistry$get_entries(dataType = "realRatingMatrix")
names(recomendation_model)

lapply(recomendation_model, "[[", "description")

#utilizziamo IBCF   

recomendation_model$IBCF_realRatingMatrix$parameters
#andiamo a controllare le similarità

similarity_mat <- similarity(ratingMatrix[1:4, ],method = "cosine", which = "users")

as.matrix(similarity_mat) 

image(as.matrix(similarity_mat), main = "User's Similarity")

movie_similarity <- similarity(ratingMatrix[ ,1:4],method = "cosine", which = "items")

as.matrix(movie_similarity) 

image(as.matrix(movie_similarity), main = "Movie Similarity")

#andiamo a valutare i rating

rating_values <- as.vector(ratingMatrix@data)
unique(rating_values)

#contiamo quante volte è stato dato uno specifico rating

Table_rating <- table(rating_values)
Table_rating

#controlliamo quali film sono più visti

movie_views <- colCounts(ratingMatrix) #conta le visualizzazioni di ogni film
table_views <- data.frame(movie = names(movie_views), views = movie_views) #crea un dataframe di visualizzazioni

table_views <- table_views[order(table_views$views, decreasing = TRUE), ]#ordinamento decrescente delle visual

table_views$title <- NA

for(i in 1:10325) {
   table_views[i,3] <- as.character(subset(movie_data, movie_data$movieId == table_views[i,1])$title)
} 

#ciclo for per assegnare il titolo del film al giusto movieId e alle giuste visualizzazione

table_views[1:6,]

#grafico dei dati

ggplot(table_views[1:6, ], aes(x = title, y = views)) +
   geom_bar(stat = "identity", fill = 'steelblue') + 
   geom_text(aes(label = views), vjust = -0.3, size = 3.5) +
   theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
   ggtitle("Total views of top Films")

#heatmap della matrice di rating

image(ratingMatrix[1:30, 1:30], axes = FALSE, main = "30 x 30 heatmap")

movie_ratings <- ratingMatrix[rowCounts(ratingMatrix) > 50, colCounts(ratingMatrix) > 50]

minimum_movies <- quantile(rowCounts(movie_ratings), 0.98)
minimum_users <- quantile(colCounts(movie_ratings), 0.98)
image(movie_ratings[rowCounts(movie_ratings) > minimum_movies, colCounts(movie_ratings) > minimum_users],
      main = "Heatmap of the top users and movies")

average_ratings <- rowMeans(movie_ratings)
qplot(average_ratings, fill = I("steelblue"), col = I("black")) +
   ggtitle("Distribution of the average rating per user")

normalized_ratings <- normalize(movie_ratings)
sum(rowMeans(normalized_ratings) > 0.00001) #somma solo della media delle righe del normalized_ratings, prendendo solo le medie > di 0.00001

#creiamo la heatmap dei valori normalizzati
image(normalized_ratings[rowCounts(normalized_ratings) > minimum_movies, colCounts(normalized_ratings) > minimum_users], 
      main = "Normalized ratings of the Top Users")

#binarizzazione delle medie, sarà 0 se il rating medio di quel film è < di 3.5; viceversa sarà 1 se il rating media sarà >

binary_minimum_movies <- quantile(rowCounts(movie_ratings), 0.90)
binary_minimum_users <- quantile(colCounts(movie_ratings), 0.90)

movies_watched <- binarize(movie_ratings, minRating = 1)

good_rated_films <- binarize(movie_ratings, minRating = 3.5)
image(good_rated_films[rowCounts(movie_ratings) > binary_minimum_movies, colCounts(movie_ratings) > binary_minimum_users],
      main = "Heatmap of the top Users and Movies")

#utilizziamo il Collaborative Filtering System

sampled_data <- sample(x = c(TRUE, FALSE),
                       size = nrow(movie_ratings),
                       replace = TRUE,
                       prob = c(0.8, 0.2))
training_data <- movie_ratings[sampled_data, ]
testing_data <- movie_ratings[!sampled_data, ]

#sistema di raccomandazione

recommendation_system <- recommenderRegistry$get_entries(dataType = "realRatingMatrix")
recommendation_system$IBCF_realRatingMatrix$parameters

recommen_model <- Recommender(data = training_data,
                              method = "IBCF",
                              parameter = list(k = 30))
recommen_model

class(recommen_model)

info <- getModel(recommen_model)
class(info$sim)

image(info$sim[1:20, 1:20],
      main = "Heatmap of the first rows and columns")

sum_rows <- rowSums(info$sim > 0)
table(sum_rows)
sum_cols <- colSums(info$sim > 0)
qplot(sum_cols, fill = I("steelblue"), col = I("black"))+ ggtitle("Distribution of the columns count")

#andiamo a raccomandare

top_recommendations <- 10 #numero degli item da raccomandare per ogni utente
predicted_recommendations <- predict(object = recommen_model,
                                     newdata = testing_data,
                                     n = top_recommendations)
predicted_recommendations

user1 <- predicted_recommendations@items[[2]] 
movies_user1 <- predicted_recommendations@itemLabels[user1]
movies_user2 <- movies_user1
for(i in 1:10) {
   movies_user2[i] <- as.character(subset(movie_data, 
                                          movie_data$movieId == movies_user1[i])$title)
}

movies_user2

recommendation_matrix <- sapply(predicted_recommendations@items, 
                                function(x){ as.integer(colnames(movie_ratings)[x])})

recommendation_matrix[,1:4]

#facendo il predicted recommendation va a fare un predict tra l'oggetto recommen_model che ha al suo interno i dati 
#del training e salvato il metodo IBCF, e i nuovi dati che sono quelli del testing data (newdata = testing_data) 
#per n (10) volte
#si applica sui film dell'utente 1 e in base a quello che ha già raccomandato crea la matrice di raccomandazione
